interface inference {
    use types.{graph-builder-array, graph-encoding, execution-target, graph,
        tensor, tensor-data, error, graph-execution-context}

    /// Load an opaque sequence of bytes to use for inference.
    load: func(builder: graph-builder-array, encoding: graph-encoding,
        target: execution-target) -> result<graph, error>

    /// Create an execution instance of a loaded graph.
    ///
    /// TODO: remove completely?
    init-execution-context: func(graph: graph) -> result<graph-execution-context, error>

    /// Define the inputs to use for inference.
    set-input: func(ctx: graph-execution-context, index: u32, tensor: tensor) -> result<_, error>

    /// Compute the inference on the given inputs.
    ///
    /// TODO: refactor to compute(list<tensor>) -> result<list<tensor>, error>
    compute: func(ctx: graph-execution-context) -> result<_, error>

    /// Extract the outputs after inference.
    get-output: func(ctx: graph-execution-context, index: u32) -> result<tensor-data, error>
}
