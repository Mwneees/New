interface types {
    /// The dimensions of a tensor.
    ///
    /// The array length matches the tensor rank and each element in the array
    /// describes the size of each dimension.
    type tensor-dimensions = list<u32>

    /// The type of the elements in a tensor.
    enum tensor-type {
        FP16,
        FP32,
        U8,
        I32
    }

    /// The tensor data.
    ///
    /// Initially conceived as a sparse representation, each empty cell would be filled with zeros and
    /// the array length must match the product of all of the dimensions and the number of bytes in the
    /// type (e.g., a 2x2 tensor with 4-byte f32 elements would have a data array of length 16).
    /// Naturally, this representation requires some knowledge of how to lay out data in memory--e.g.,
    /// using row-major ordering--and could perhaps be improved.
    type tensor-data = list<u8>

    /// A tensor.
    record tensor {
        /// Describe the size of the tensor (e.g., 2x2x2x2 -> [2, 2, 2, 2]). To represent a tensor
        /// containing a single value, use `[1]` for the tensor dimensions.
        dimensions: tensor-dimensions,

        /// Describe the type of element in the tensor (e.g., f32).
        tensor-type: tensor-type,

        /// Contains the tensor data.
        data: tensor-data,
    }

    /// The graph initialization data.
    //
    /// This consists of an array of buffers because implementing backends may encode their graph IR in
    /// parts (e.g., OpenVINO stores its IR and weights separately).
    type graph-builder = list<u8>
    type graph-builder-array = list<graph-builder>

    /// An execution graph for performing inference (i.e., a model).
    ///
    /// TODO: replace with `resource`
    type graph = u32

    /// Describes the encoding of the graph. This allows the API to be implemented by various backends
    /// that encode (i.e., serialize) their graph IR with different formats.
    enum graph-encoding {
        openvino,
        onnx,
        tensorflow,
        pytorch,
        tensorflowlite
    }

    /// Define where the graph should be executed.
    enum execution-target {
        cpu,
        gpu,
        tpu
    }

    /// Bind a `graph` to the input and output tensors for an inference.
    ///
    /// TODO: replace with `resource`
    /// TODO: remove execution contexts completely
    type graph-execution-context = u32

    /// Error codes returned by functions in this API.
    enum error {
        /// No error occurred.
        success,
        /// Caller module passed an invalid argument.
        invalid-argument,
        /// Invalid encoding.
        invalid-encoding,
        /// Caller module is missing a memory export.
        missing-memory,
        /// Device or resource busy.
        busy,
        /// Runtime Error.
        runtime-error,
    }
}
