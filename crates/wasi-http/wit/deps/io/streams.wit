package wasi:io

/// WASI I/O is an I/O abstraction API which is currently focused on providing
/// stream types.
///
/// In the future, the component model is expected to add built-in stream types;
/// when it does, they are expected to subsume this API.
interface streams {
    use wasi:poll/poll.{pollable}

    /// Streams provide a sequence of data and then end; once they end, they
    /// no longer provide any further data.
    ///
    /// For example, a stream reading from a file ends when the stream reaches
    /// the end of the file. For another example, a stream reading from a
    /// socket ends when the socket is closed.
    enum stream-status {
        /// The stream is open and may produce further data.
        open,
        /// When reading, this indicates that the stream will not produce
        /// further data.
        /// When writing, this indicates that the stream will no longer be read.
        /// Further writes are still permitted.
        ended,
    }

    /// An input bytestream. In the future, this will be replaced by handle
    /// types.
    ///
    /// `input-stream`s are *non-blocking* to the extent practical on underlying
    /// platforms. I/O operations always return promptly; if fewer bytes are
    /// promptly available than requested, they return the number of bytes promptly
    /// available, which could even be zero. To wait for data to be available,
    /// use the `subscribe-to-input-stream` function to obtain a `pollable` which
    /// can be polled for using `wasi:poll/poll.poll_oneoff`.
    ///
    /// And at present, it is a `u32` instead of being an actual handle, until
    /// the wit-bindgen implementation of handles and resources is ready.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    type input-stream = u32

    /// Perform a non-blocking read from the stream.
    ///
    /// This function returns a list of bytes containing the data that was
    /// read, along with a `stream-status` which, indicates whether further
    /// reads are expected to produce data. The returned list will contain up to
    /// `len` bytes; it may return fewer than requested, but not more. An
    /// empty list and `stream-status:open` indicates no more data is
    /// available at this time, and that the pollable given by
    /// `subscribe-to-input-stream` will be ready when more data is available.
    /// 
    /// Once a stream has reached the end, subsequent calls to `read` or
    /// `skip` will always report `stream-status:ended` rather than producing more
    /// data.
    ///
    /// When the caller gives a `len` of 0, it represents a request to read 0
    /// bytes. This read should  always succeed and return an empty list and
    /// the current `stream-status`.
    ///
    /// The `len` parameter is a `u64`, which could represent a list of u8 which
    /// is not possible to allocate in wasm32, or not desirable to allocate as
    /// as a return value by the callee. The callee may return a list of bytes
    /// less than `len` in size while more bytes are available for reading.
    read: func(
        this: input-stream,
        /// The maximum number of bytes to read
        len: u64
    ) -> result<tuple<list<u8>, stream-status>>

    /// Read bytes from a stream, after blocking until at least one byte can
    /// be read. Except for blocking, identical to `read`.
    blocking-read: func(
        this: input-stream,
        /// The maximum number of bytes to read
        len: u64
    ) -> result<tuple<list<u8>, stream-status>>

    /// Skip bytes from a stream.
    ///
    /// This is similar to the `read` function, but avoids copying the
    /// bytes into the instance.
    ///
    /// Once a stream has reached the end, subsequent calls to read or
    /// `skip` will always report end-of-stream rather than producing more
    /// data.
    ///
    /// This function returns the number of bytes skipped, along with a
    /// `stream-status` indicating whether the end of the stream was
    /// reached. The returned value will be at most `len`; it may be less.
    skip: func(
        this: input-stream,
        /// The maximum number of bytes to skip.
        len: u64,
    ) -> result<tuple<u64, stream-status>>

    /// Skip bytes from a stream, after blocking until at least one byte
    /// can be skipped. Except for blocking behavior, identical to `skip`.
    blocking-skip: func(
        this: input-stream,
        /// The maximum number of bytes to skip.
        len: u64,
    ) -> result<tuple<u64, stream-status>>

    /// Create a `pollable` which will resolve once either the specified stream
    /// has bytes available to read or the other end of the stream has been
    /// closed.
    /// The created `pollable` is a child resource of the `input-stream`.
    /// Implementations may trap if the `input-stream` is dropped before
    /// all derived `pollable`s created with this function are dropped.
    subscribe-to-input-stream: func(this: input-stream) -> pollable

    /// Dispose of the specified `input-stream`, after which it may no longer
    /// be used.
    /// Implementations may trap if this `input-stream` is dropped while child
    /// `pollable` resources are still alive.
    /// After this `input-stream` is dropped, implementations may report any
    /// corresponding `output-stream` has `stream-state.closed`.
    drop-input-stream: func(this: input-stream)

    /// An output bytestream. In the future, this will be replaced by handle
    /// types.
    ///
    /// `output-stream`s are *non-blocking* to the extent practical on
    /// underlying platforms. Except where specified otherwise, I/O operations also
    /// always return promptly, after the number of bytes that can be written
    /// promptly, which could even be zero. To wait for the stream to be ready to
    /// accept data, the `subscribe-to-output-stream` function to obtain a
    /// `pollable` which can be polled for using `wasi:poll`.
    ///
    /// And at present, it is a `u32` instead of being an actual handle, until
    /// the wit-bindgen implementation of handles and resources is ready.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    type output-stream = u32


    /// Return values:
    /// None means: not yet ready for writing
    /// Some(Ready(n)) means: ready writing up to n bytes
    /// Some(Closed) means: an error occured during the last write, or the other end
    /// will no longer be reading. Future writes will trap.
    ///
    /// when the subscribe-to-output-stream pollable becomes ready, the
    /// return value of this function is some.
    variant write-readiness {
        ready(u64), // n always greater than 0
        closed
    }
    check-write: func(
        this: output-stream
    ) -> option<write-readiness>



    /// perform a write. this function never blocks.
    ///
    /// Precondition: check-write gave Some(Ready(n)) and contents has a
    /// length of less than or equal to n. Otherwise, this function will trap.
    ///
    /// returns Some(closed) without writing if the stream has closed since
    /// the last call to check-write provided a Some(Ready(n)).
    ///
    /// otherwise, return value is like a call to check-write has occured
    /// immediately after writing the contents to the stream.
    write: func(
        this: output-stream,
        contents: list<u8>
    ) -> option<write-readiness>


    /// Create a `pollable` which will resolve once the output-stream
    /// is ready for more writing, or has closed.
    ///
    /// If the stream is closed, this pollable is always ready immediately.
    ///
    /// The created `pollable` is a child resource of the `output-stream`.
    /// Implementations may trap if the `output-stream` is dropped before
    /// all derived `pollable`s created with this function are dropped.
    subscribe-to-write-ready: func(this: output-stream) -> pollable

    /// like check-write, except it blocks until the stream becomes ready or closed.
    blocking-check-write: func(this: output-stream) -> write-readiness

    /// Write zeroes to a stream.
    ///
    /// this should be used precisely like `write` with the exact same
    /// preconditions (must use check-write first), but instead of
    /// passing a list of bytes, you simply pass the number of zero-bytes
    /// that should be written.
    write-zeroes: func(
        this: output-stream,
        /// The number of zero-bytes to write
        len: u64
    ) -> option<write-readiness>

    enum flush-result {
        done,
        closed
    }
    /// begin an asynchronous flush operation.
    ///
    /// this tells the output-stream that the caller intends any buffered
    /// output to be flushed. the output which is expected to be flushed
    /// is all that has been passed to `write` prior to this call.
    ///
    /// return values are equivelant to calling check-flush immediately
    /// after the intent to flush is registered:
    /// returns none if the flush is pending
    /// returns some(done) if the flush finished immediately (this may happen
    /// if flushing is not applicable in the implementation)
    /// returns some(closed) if the stream is closed
    ///
    /// you can observe the flushing state with `check-flush` and
    /// `subscribe-to-flush`.
    flush: func(
        this: output-stream,
    ) -> option<flush-result>

    /// returns none while the flush is pending
    /// returns some(done) when the flush has finished
    /// returns some(closed) if the stream has closed before the flush finished
    check-flush: func(
        this: output-stream,
    ) -> option<flush-result>

    /// a flush, followed by blocking until the flush has finished, and
    /// returning the result of a final check-flush.
    blocking-flush: func(this: output-stream) -> flush-result

    /// get a pollable which becomes ready when the flush has finished
    /// (check-flush return value becomes some)
    ///
    /// The created `pollable` is a child resource of the `output-stream`.
    /// Implementations may trap if the `output-stream` is dropped before
    /// all derived `pollable`s created with this function are dropped.
    subscribe-to-flush: func(
        this: output-stream,
    ) -> pollable

    /// Read from one stream and write to another.
    ///
    /// This function returns the number of bytes transferred; it may be less
    /// than `len`.
    ///
    /// Unlike other I/O functions, this function blocks until all the data
    /// read from the input stream has been written to the output stream.
    splice: func(
        this: output-stream,
        /// The stream to read from
        src: input-stream,
        /// The number of bytes to splice
        len: u64,
    ) -> result<tuple<u64, stream-status>>

    /// Read from one stream and write to another, with blocking.
    ///
    /// This is similar to `splice`, except that it blocks until at least
    /// one byte can be read.
    blocking-splice: func(
        this: output-stream,
        /// The stream to read from
        src: input-stream,
        /// The number of bytes to splice
        len: u64,
    ) -> result<tuple<u64, stream-status>>

    /// Forward the entire contents of an input stream to an output stream.
    ///
    /// This function repeatedly reads from the input stream and writes
    /// the data to the output stream, until the end of the input stream
    /// is reached, or an error is encountered.
    ///
    /// Unlike other I/O functions, this function blocks until the end
    /// of the input stream is seen and all the data has been written to
    /// the output stream.
    ///
    /// This function returns the number of bytes transferred, and the status of
    /// the output stream.
    forward: func(
        this: output-stream,
        /// The stream to read from
        src: input-stream
    ) -> result<tuple<u64, stream-status>>


    /// Dispose of the specified `output-stream`, after which it may no longer
    /// be used.
    /// Implementations may trap if this `output-stream` is dropped while
    /// child `pollable` resources are still alive.
    /// After this `output-stream` is dropped, implementations may report any
    /// corresponding `input-stream` has `stream-state.closed`.
    drop-output-stream: func(this: output-stream)
}
