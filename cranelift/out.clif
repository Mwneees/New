function u0:2(i64 vmctx, i64) fast {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned readonly gv0+8
    gv2 = load.i64 notrap aligned gv1
    gv3 = vmctx
    gv4 = load.i64 notrap aligned readonly gv3+128
    sig0 = (i64 vmctx, i32 uext, i32 uext, i32 uext) -> i32 uext apple_aarch64
    sig1 = (i64 vmctx, i32 uext, i32 uext, i32 uext) -> i32 uext apple_aarch64
    sig2 = (i64 vmctx, i32 uext, i32 uext) -> i32 uext apple_aarch64
    sig3 = (i64 vmctx, i32 uext) -> i32 uext apple_aarch64
    stack_limit = gv2

                                block0(v0: i64, v1: i64):
                                    v16 -> v0
                                    v39 -> v0
                                    v40 -> v0
@00a3                               v2 = iconst.i32 0
                                    v3 -> v2
                                    v21 -> v2
                                    v37 -> v2
                                    v38 -> v2
@00ad                               v5 = iconst.i32 1
@00a5                               jump block2(v2)  ; v2 = 0

                                block2(v4: i32):
                                    v50 = iconst.i32 0
                                    v51 = iconst.i32 1
                                    v52 = iadd v4, v51  ; v51 = 1
@00c1                               brif v50, block2(v52), block3  ; v50 = 0

                                block3:
                                    v53 = iconst.i32 0
@00ce                               v19 = load.i64 notrap aligned readonly v0+128
@00c8                               v14 = iconst.i32 255
@00cb                               v15 = band.i32 v52, v14  ; v14 = 255
@00ce                               v18 = uextend.i64 v15
@00ce                               v20 = iadd v19, v18
@00b2                               v7 = iconst.i32 0x3fff_ffff
@00c4                               jump block5(v53)  ; v53 = 0

                                block5(v29: i32):
@00cc                               v17 = load.i32 notrap aligned table v0+160
@00ce                               store little heap v17, v20
@00dc                               v28 = load.i32 little heap v19
                                    v54 = iconst.i32 0x3fff_ffff
                                    v55 = band v29, v54  ; v54 = 0x3fff_ffff
                                    v56 = icmp ne v55, v54  ; v54 = 0x3fff_ffff
@00f7                               v36 = uextend.i32 v56
                                    v57 = iconst.i32 1
                                    v58 = iadd v29, v57  ; v57 = 1
@00f8                               brif v36, block5(v58), block1

                                block1:
@00fb                               return
}

