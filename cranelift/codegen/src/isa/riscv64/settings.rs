//! risc Settings.

use crate::settings::{self, detail, Builder, Value};
use core::fmt;

//todo copy from aarch64 modify it.

// Include code generated by `cranelift-codegen/meta/src/gen_settings.rs:`. This file contains a
// public `Flags` struct with an impl for all of the settings defined in
// `cranelift-codegen/meta/src/isa/arm64/settings.rs`.
// include!(concat!(env!("OUT_DIR"), "/settings-arm64.rs"));
//todo :: import settings

// copy from arm64 easy to modify
#[derive(Clone, Hash)]
/// Flags group `arm64`.
pub struct Flags {
    bytes: [u8; 1],
    v_len: usize,
}
impl Flags {
    /// Create flags arm64 settings group.
    #[allow(unused_variables)]
    pub fn new(shared: &settings::Flags, builder: Builder) -> Self {
        let bvec = builder.state_for("riscv64");
        let mut riscv64 = Self {
            v_len: 128,
            bytes: [0; 1],
        };
        debug_assert_eq!(bvec.len(), 1);
        riscv64.bytes[0..1].copy_from_slice(&bvec);
        riscv64
    }
}
impl Flags {
    /// Iterates the setting values.
    pub fn iter(&self) -> impl Iterator<Item = Value> {
        let mut bytes = [0; 1];
        bytes.copy_from_slice(&self.bytes[0..1]);
        DESCRIPTORS.iter().filter_map(move |d| {
            let values = match &d.detail {
                detail::Detail::Preset => return None,
                detail::Detail::Enum { last, enumerators } => {
                    Some(TEMPLATE.enums(*last, *enumerators))
                }
                _ => None,
            };
            Some(Value {
                name: d.name,
                detail: d.detail,
                values,
                value: bytes[d.offset as usize],
            })
        })
    }
}
/// User-defined settings.
#[allow(dead_code)]
impl Flags {
    /*
        detect the v_len for the host machine
    */
    fn detect_v_len() -> usize {
        /*

        */
        unimplemented!()
    }
    pub fn set_v_len(&mut self, l: usize) {
        self.v_len = l;
        crate::isa::riscv64::inst::set_x_len(l);
    }
}

static DESCRIPTORS: [detail::Descriptor; 1] = [detail::Descriptor {
    name: "test",
    description: "not sure now",
    offset: 0,
    detail: detail::Detail::Bool { bit: 0 },
}];
static ENUMERATORS: [&str; 0] = [];
static HASH_TABLE: [u16; 2] = [0xffff, 0];
static PRESETS: [(u8, u8); 0] = [];
static TEMPLATE: detail::Template = detail::Template {
    name: "riscv64",
    descriptors: &DESCRIPTORS,
    enumerators: &ENUMERATORS,
    hash_table: &HASH_TABLE,
    defaults: &[0x00],
    presets: &PRESETS,
};
/// Create a `settings::Builder` for the arm64 settings group.
pub fn builder() -> Builder {
    Builder::new(&TEMPLATE)
}
impl fmt::Display for Flags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        writeln!(f, "[riscv64]")?;
        for d in &DESCRIPTORS {
            if !d.detail.is_preset() {
                write!(f, "{} = ", d.name)?;
                TEMPLATE.format_toml_value(d.detail, self.bytes[d.offset as usize], f)?;
                writeln!(f)?;
            }
        }
        Ok(())
    }
}
