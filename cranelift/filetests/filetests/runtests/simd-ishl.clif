test run
set enable_simd
target aarch64
; target s390x
target x86_64 skylake

function %ishl_i32x4() -> b1 {
block0:
    v0 = iconst.i32 1
    v1 = vconst.i32x4 [1 2 4 8]
    v2 = ishl v1, v0

    v3 = extractlane v2, 0
    v4 = icmp_imm eq v3, 2

    v5 = extractlane v2, 3
    v6 = icmp_imm eq v5, 16

    v7 = band v4, v6
    return v7
}
; run

function %ishl_too_large_i16x8() -> b1 {
block0:
    v0 = iconst.i32 17 ; note that this will wrap, being equivalent to shifting by 1
    v1 = vconst.i16x8 [1 2 4 8 16 32 64 128]
    v2 = ishl v1, v0

    v3 = extractlane v2, 0
    v4 = icmp_imm eq v3, 0

    v5 = extractlane v2, 3
    v6 = icmp_imm eq v5, 0

    v7 = band v4, v6
    return v7
}
; run


function %ishl_i8x16() -> b1 {
block0:
    v0 = iconst.i32 1
    v1 = vconst.i8x16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
    v2 = ishl v1, v0

    v3 = vconst.i8x16 [0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30]
    v4 = icmp eq v2, v3
    v5 = vall_true v4
    return v5
}
; run


function %ishl_imm_i64x2() -> b1 {
block0:
    v1 = vconst.i64x2 [1 0]
    v2 = ishl_imm v1, 1

    v3 = vconst.i64x2 [2 0]
    v4 = icmp eq v2, v3
    v5 = vall_true v4
    return v5
}
; run


function %ishl_i8x16(i8x16, i32) -> i8x16 {
block0(v0: i8x16, v1: i32):
    v2 = ishl v0, v1
    return v2
}
; run: %ishl_i8x16([0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15], 4) == [0x00 0x10 0x20 0x30 0x40 0x50 0x60 0x70 0x80 0x90 0xa0 0xb0 0xc0 0xd0 0xe0 0xf0]

function %ishl_i16x8(i16x8, i32) -> i16x8 {
block0(v0: i16x8, v1: i32):
    v2 = ishl v0, v1
    return v2
}
; run: %ishl_i16x8([1 2 4 8 16 32 64 128], 17) == [0 0 0 0 0 0 0 0]

function %ishl_i32x4(i32x4, i32) -> i32x4 {
block0(v0: i32x4, v1: i32):
    v2 = ishl v0, v1
    return v2
}
; run: %ishl_i32x4([1 2 4 8], 1) == [2 4 8 16]

function %ishl_imm_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v2 = ishl_imm v0, 1
    return v2
}
; run: %ishl_imm_i64x2([1 0]) == [2 0]
