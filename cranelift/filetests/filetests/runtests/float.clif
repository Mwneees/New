test run
target riscv64gc
;; target x86_64 fma not supported!!!!!!!!!!!

function %fadd_s(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fadd v0, v1
  return v2
}
; run: %fadd_s(0x1.0, 0x2.0) == 0x3.0
; run: %fadd_s(-0x1.0, +0x1.0) == 0x0.0
; run: %fadd_s(-0x1.0, NaN) == NaN
; run: %fadd_s(-0x5.0, +0x10.0) == 0xb.0


function %fadd_d(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fadd v0, v1
  return v2
}
; run: %fadd_d(0x1.0, 0x2.0) == 0x3.0
; run: %fadd_d(-0x1.0, +0x1.0) == 0x0.0
; run: %fadd_d(-0x1.0, NaN) == NaN
; run: %fadd_d(-0x5.0, +0x10.0) == 0xb.0

function %fsub_s(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fsub v0, v1
  return v2
}
; run: %fsub_s(0x1.0, 0x2.0) == -0x1.0
; run: %fsub_s(-0x1.0, +0x1.0) == -0x2.0
; run: %fsub_s(-0x1.0, NaN) == NaN
; run: %fsub_s(-0x5.0, +0x10.0) == -0x15.0; 
; run: %fsub_s(0x8.0, +0x3.0) == +0x5.0

function %fsub_d(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fsub v0, v1
  return v2
}
; run: %fsub_d(0x1.0, 0x2.0) == -0x1.0
; run: %fsub_d(-0x1.0, +0x1.0) == -0x2.0
; run: %fsub_d(-0x1.0, NaN) == NaN
; run: %fsub_d(-0x5.0, +0x10.0) == -0x15.0; 
; run: %fsub_d(0x8.0, +0x3.0) == +0x5.0

function %fmul_s(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmul v0, v1
  return v2
}
; run: %fmul_s(0x1.0, 0x2.0) == 0x2.0
; run: %fmul_s(-0x1.0, +0x1.0) == -0x1.0
; run: %fmul_s(-0x1.0, NaN) == NaN
; run: %fmul_s(-0x5.0, +0x10.0) == -0x50.0

function %fmul_d(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmul v0, v1
  return v2
}
; run: %fmul_d(0x1.0, 0x2.0) == 0x2.0
; run: %fmul_d(-0x1.0, +0x1.0) == -0x1.0
; run: %fmul_d(-0x1.0, NaN) == NaN
; run: %fmul_d(-0x5.0, +0x10.0) == -0x50.0

function %fdiv_s(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fdiv v0, v1
  return v2
}
; run: %fdiv_s(0x2.0, 0x1.0) == 0x2.0
; run: %fdiv_s(-0x9.0, +0x3.0) == -0x3.0
; run: %fdiv_s(-0x1.0, NaN) == NaN
; run: %fdiv_s(+0xa.0 ,-0x5.0) == -0x2.0


function %fdiv_d(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fdiv v0, v1
  return v2
}
; run: %fdiv_d(0x2.0, 0x1.0) == 0x2.0
; run: %fdiv_d(-0x9.0, +0x3.0) == -0x3.0
; run: %fdiv_d(-0x1.0, NaN) == NaN
; run: %fdiv_d(+0xa.0 ,-0x5.0) == -0x2.0


function %f_load_store_s(f32) -> f32 {
    ss0 = explicit_slot 8;
block0(v0: f32):
    stack_store.f32 v0,ss0
    v1 = stack_load.f32 ss0
  return v1
}
; run: %f_load_store_s(0x2.0) == 0x2.0
; run: %f_load_store_s(0x3.0) == 0x3.0
; run: %f_load_store_s(0x0.0) == 0x0.0
; run: %f_load_store_s(-0x123.0) == -0x123.0

function %f_load_store_d(f64) -> f64 {
    ss0 = explicit_slot 8;
block0(v0: f64):
    stack_store.f64 v0,ss0
    v1 = stack_load.f64 ss0
  return v1
}
; run: %f_load_store_d(0x2.0) == 0x2.0
; run: %f_load_store_d(0x3.0) == 0x3.0
; run: %f_load_store_d(0x0.0) == 0x0.0
; run: %f_load_store_d(-0x123.0) == -0x123.0

function %fma_s(f32 , f32 , f32) -> f32 {
block0(v0: f32 , v1 : f32, v2 : f32):
  v3 = fma v0,v1,v2
  return v3
}
; run: %fma_s(0x1.0 , 0x2.0 , 0x3.0) == 0x5.0
; run: %fma_s(-0x1.0 , 0x2.0 , 0x3.0) == 0x1.0
; run: %fma_s(-0x3.0 , 0x2.0 , 0x10.0) == 0xa.0
; run: %fma_s(-0x4.0 , 0x5.0 , 0x10.0) == -0x4.0

function %fma_d(f64 , f64 , f64) -> f64 {
block0(v0: f64 , v1 : f64, v2 : f64):
  v3 = fma v0,v1,v2
  return v3
}
; run: %fma_d(0x1.0 , 0x2.0 , 0x3.0) == 0x5.0
; run: %fma_d(-0x1.0 , 0x2.0 , 0x3.0) == 0x1.0
; run: %fma_d(-0x3.0 , 0x2.0 , 0x10.0) == 0xa.0
; run: %fma_d(-0x4.0 , 0x5.0 , 0x10.0) == -0x4.0


function %fsqrt_s(f32) -> f32 {
block0(v0: f32):
  v1 = sqrt v0
  return v1
}
; run: %fsqrt_s(0x1.0) == 0x1.0
; run: %fsqrt_s(0x10.0) == 0x4.0
; run: %fsqrt_s(0x9.0) == 0x3.0
; run: %fsqrt_s(0x4.0) == 0x2.0
; run: %fsqrt_s(NaN) == NaN

function %fsqrt_d(f64) -> f64 {
block0(v0: f64):
  v1 = sqrt v0
  return v1
}
; run: %fsqrt_d(0x1.0) == 0x1.0
; run: %fsqrt_d(0x10.0) == 0x4.0
; run: %fsqrt_d(0x9.0) == 0x3.0
; run: %fsqrt_d(0x4.0) == 0x2.0
; run: %fsqrt_d(NaN) == NaN

function %fneg_s(f32) -> f32 {
block0(v0: f32):
  v1 = fneg v0
  return v1
}
; run: %fneg_s(0x1.0) == -0x1.0
; run: %fneg_s(0x10.0) == -0x10.0
; run: %fneg_s(0x9.0) == -0x9.0
; run: %fneg_s(0x4.0) == -0x4.0
; run: %fneg_s(+NaN) == -NaN

function %fneg_d(f64) -> f64 {
block0(v0: f64):
  v1 = fneg v0
  return v1
}
; run: %fneg_d(0x1.0) == -0x1.0
; run: %fneg_d(0x10.0) == -0x10.0
; run: %fneg_d(0x9.0) == -0x9.0
; run: %fneg_d(0x4.0) == -0x4.0
; run: %fneg_d(+NaN) == -NaN

function %fabs_s(f32) -> f32 {
block0(v0: f32):
  v1 = fabs v0
  return v1
}

; run: %fabs_s(0x1.0) == +0x1.0
; run: %fabs_s(-0x10.0) == +0x10.0
; run: %fabs_s(0x9.0) == 0x9.0
; run: %fabs_s(-0x4.0) == +0x4.0
; run: %fabs_s(-NaN) == +NaN

function %fabs_d(f64) -> f64 {
block0(v0: f64):
  v1 = fabs v0
  return v1
}
; run: %fabs_d(0x1.0) == +0x1.0
; run: %fabs_d(-0x10.0) == +0x10.0
; run: %fabs_d(0x9.0) == 0x9.0
; run: %fabs_d(-0x4.0) == +0x4.0
; run: %fabs_d(-NaN) == +NaN

function %fmin_s(f32 , f32) -> f32 {
block0(v0: f32 , v1 : f32):
  v2 = fmin v0,v1
  return v2
}
; run: %fmin_s(0x1.0 , 0x5.0) == +0x1.0
; run: %fmin_s(-0x10.0 , -0x20.0) ==-0x20.0
; run: %fmin_s(-0x4.0 ,0x1.0) == -0x4.0
; run: %fmin_s(-0x3.0 ,0x9.0) == -0x3.0

function %fmin_d(f64 , f64) -> f64 {
block0(v0: f64 , v1 : f64):
  v2 = fmin v0,v1
  return v2
}
; run: %fmin_d(0x1.0 , 0x5.0) == +0x1.0
; run: %fmin_d(-0x10.0 , -0x20.0) ==-0x20.0
; run: %fmin_d(-0x4.0 ,0x1.0) == -0x4.0
; run: %fmin_d(-0x3.0 ,0x9.0) == -0x3.0

function %fmax_s(f32 , f32) -> f32 {
block0(v0: f32 , v1 : f32):
  v2 = fmax v0,v1
  return v2
}
; run: %fmax_s(0x1.0 , 0x5.0) == +0x5.0
; run: %fmax_s(-0x10.0 , -0x20.0) ==-0x10.0
; run: %fmax_s(-0x4.0 ,0x1.0) == +0x1.0
; run: %fmax_s(-0x3.0 ,0x9.0) == +0x9.0

function %fmax_d(f64 , f64) -> f64 {
block0(v0: f64 , v1 : f64):
  v2 = fmax v0,v1
  return v2
}
; run: %fmax_d(0x1.0 , 0x5.0) == +0x5.0
; run: %fmax_d(-0x10.0 , -0x20.0) ==-0x10.0
; run: %fmax_d(-0x4.0 ,0x1.0) == +0x1.0
; run: %fmax_d(-0x3.0 ,0x9.0) == +0x9.0

function %fcvt_w_s(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}
; run: %fcvt_w_s(0x1.0) == 1
; run: %fcvt_w_s(-0x1.0) == -1
; run: %fcvt_w_s(-0x99.0) == -0x99
; run: %fcvt_w_s(-0x5.0) == -5

function %fcvt_w_d(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}
; run: %fcvt_w_d(0x1.0) == 1
; run: %fcvt_w_d(-0x1.0) == -1
; run: %fcvt_w_d(-0x99.0) == -0x99
; run: %fcvt_w_d(-0x5.0) == -5

function %fcvt_wu_s(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}
; run: %fcvt_wu_s(0x1.0) == 1
; run: %fcvt_wu_s(0x100.0) == 0x100
; run: %fcvt_wu_s(0x99.0) == 0x99
; run: %fcvt_wu_s(0x5.0) == 5



function %fcvt_wu_d(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}
; run: %fcvt_wu_d(0x1.0) == 1
; run: %fcvt_wu_d(0x100.0) == 0x100
; run: %fcvt_wu_d(0x99.0) == 0x99
; run: %fcvt_wu_d(0x5.0) == 5


function %fcvt_l_s(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}
; run: %fcvt_l_s(0x1.0) == 1
; run: %fcvt_l_s(-0x1.0) == -1
; run: %fcvt_l_s(-0x99.0) == -0x99
; run: %fcvt_l_s(-0x5.0) == -5


function %fcvt_l_d(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}
; run: %fcvt_l_d(0x1.0) == 1
; run: %fcvt_l_d(-0x1.0) == -1
; run: %fcvt_l_d(-0x99.0) == -0x99
; run: %fcvt_l_d(-0x5.0) == -5

function %fcvt_lu_s(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}
; run: %fcvt_lu_s(0x1.0) == 1
; run: %fcvt_lu_s(0x100.0) == 0x100
; run: %fcvt_lu_s(0x99.0) == 0x99
; run: %fcvt_lu_s(0x5.0) == 5

function %fcvt_lu_d(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}
; run: %fcvt_lu_d(0x1.0) == 1
; run: %fcvt_lu_d(0x100.0) == 0x100
; run: %fcvt_lu_d(0x99.0) == 0x99
; run: %fcvt_lu_d(0x5.0) == 5

;;;;sat 

function %fcvt_w_s_sat(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}
; run: %fcvt_w_s_sat(0x1.0) == 1
; run: %fcvt_w_s_sat(-0x1.0) == -1
; run: %fcvt_w_s_sat(-0x99.0) == -0x99
; run: %fcvt_w_s_sat(+NaN) == 0
; run: %fcvt_w_s_sat(+Inf) == 0x7fff_ffff

function %fcvt_l_s_sat(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}
; run: %fcvt_l_s_sat(0x1.0) == 1
; run: %fcvt_l_s_sat(-0x1.0) == -1
; run: %fcvt_l_s_sat(-0x99.0) == -0x99
; run: %fcvt_l_s_sat(+NaN) == 0
; run: %fcvt_l_s_sat(+Inf) == 0x7fff_ffff_ffff_ffff


function %fcvt_wu_s_sat(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}
; run: %fcvt_wu_s_sat(0x1.0) == 1
; run: %fcvt_wu_s_sat(+0x99.0) == +0x99
; run: %fcvt_wu_s_sat(+NaN) == 0
; run: %fcvt_wu_s_sat(+Inf) == 0x7fff_ffff

function %fcvt_lu_s_sat(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}
; run: %fcvt_lu_s_sat(0x1.0) == 1
; run: %fcvt_lu_s_sat(+0x99.0) == +0x99
; run: %fcvt_lu_s_sat(+NaN) == 0
; run: %fcvt_lu_s_sat(+Inf) == 0xffff_ffff_ffff_ffff


function %fcvt_w_s_sat(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}
; run: %fcvt_w_s_sat(0x1.0) == 1
; run: %fcvt_w_s_sat(-0x1.0) == -1
; run: %fcvt_w_s_sat(-0x99.0) == -0x99
; run: %fcvt_w_s_sat(+NaN) == 0
; run: %fcvt_w_s_sat(+Inf) == 0x7fff_ffff

function %fcvt_l_s_sat(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}
; run: %fcvt_l_s_sat(0x1.0) == 1
; run: %fcvt_l_s_sat(-0x1.0) == -1
; run: %fcvt_l_s_sat(-0x99.0) == -0x99
; run: %fcvt_l_s_sat(+NaN) == 0
; run: %fcvt_l_s_sat(+Inf) == 0x7fff_ffff_ffff_ffff


function %fcvt_wu_s_sat(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}
; run: %fcvt_wu_s_sat(0x1.0) == 1
; run: %fcvt_wu_s_sat(+0x99.0) == +0x99
; run: %fcvt_wu_s_sat(+NaN) == 0
; run: %fcvt_wu_s_sat(+Inf) == 0xffff_ffff

function %fcvt_lu_s_sat(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}
; run: %fcvt_lu_s_sat(0x1.0) == 1
; run: %fcvt_lu_s_sat(+0x99.0) == +0x99
; run: %fcvt_lu_s_sat(+NaN) == 0
; run: %fcvt_lu_s_sat(+Inf) == 0xffff_ffff_ffff_ffff

