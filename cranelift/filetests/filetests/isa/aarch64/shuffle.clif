test compile precise-output
set unwind_info=false
target aarch64

function %shuffle_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = shuffle v0, v1, [3 0 31 26 4 6 12 11 23 13 24 4 2 15 17 5]
    return v2
}

; VCode:
; block0:
;   mov v30.16b, v0.16b
;   mov v31.16b, v1.16b
;   ldr q3, pc+8 ; b 20 ; data.f128 0x05110f0204180d170b0c06041a1f0003
;   tbl v0.16b, { v30.16b, v31.16b }, v3.16b
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   mov v30.16b, v0.16b
;   mov v31.16b, v1.16b
;   ldr q3, #0x10
;   b #0x20
;   adc w3, w0, wzr
;   add w4, w16, w12, lsl #1
;   orr z23.b, p3/m, z23.b, z8.b
;   mov z2.b, p1/z, #0x78
;   tbl v0.16b, {v30.16b, v31.16b}, v3.16b
;   ret

function %aarch64_uzp1_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = shuffle v0, v1, [0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30]
    return v2
}

; VCode:
; block0:
;   uzp1 v0.16b, v0.16b, v1.16b
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp1 v0.16b, v0.16b, v1.16b
;   ret

function %aarch64_uzp2_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = shuffle v0, v1, [1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31]
    return v2
}

; VCode:
; block0:
;   uzp2 v0.16b, v0.16b, v1.16b
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp2 v0.16b, v0.16b, v1.16b
;   ret

function %aarch64_uzp1_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [0 1 4 5 8 9 12 13 16 17 20 21 24 25 28 29]
    v5 = bitcast.i16x8 little v4
    return v5
}

; VCode:
; block0:
;   uzp1 v0.8h, v0.8h, v1.8h
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp1 v0.8h, v0.8h, v1.8h
;   ret

function %aarch64_uzp2_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [2 3 6 7 10 11 14 15 18 19 22 23 26 27 30 31]
    v5 = bitcast.i16x8 little v4
    return v5
}

; VCode:
; block0:
;   uzp2 v0.8h, v0.8h, v1.8h
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp2 v0.8h, v0.8h, v1.8h
;   ret

function %aarch64_uzp1_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [0 1 2 3 8 9 10 11 16 17 18 19 24 25 26 27]
    v5 = bitcast.i32x4 little v4
    return v5
}

; VCode:
; block0:
;   uzp1 v0.4s, v0.4s, v1.4s
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp1 v0.4s, v0.4s, v1.4s
;   ret

function %aarch64_uzp2_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [4 5 6 7 12 13 14 15 20 21 22 23 28 29 30 31]
    v5 = bitcast.i32x4 little v4
    return v5
}

; VCode:
; block0:
;   uzp2 v0.4s, v0.4s, v1.4s
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp2 v0.4s, v0.4s, v1.4s
;   ret

function %aarch64_uzp1_i64x2(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [0 1 2 3 4 5 6 7 16 17 18 19 20 21 22 23]
    v5 = bitcast.i64x2 little v4
    return v5
}

; VCode:
; block0:
;   uzp1 v0.2d, v0.2d, v1.2d
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp1 v0.2d, v0.2d, v1.2d
;   ret

function %aarch64_uzp2_i64x2(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
    v2 = bitcast.i8x16 little v0
    v3 = bitcast.i8x16 little v1
    v4 = shuffle v2, v3, [8 9 10 11 12 13 14 15 24 25 26 27 28 29 30 31]
    v5 = bitcast.i64x2 little v4
    return v5
}

; VCode:
; block0:
;   uzp2 v0.2d, v0.2d, v1.2d
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   uzp2 v0.2d, v0.2d, v1.2d
;   ret

