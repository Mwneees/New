test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64


function %ctz(i128) -> i128 {
block0(v0: i128):
    v1 = ctz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    $64, %ecx
;   bsfq    %rdi, %rax
;   cmovzq  %rcx, %rax, %rax
;   movl    $64, %edi
;   bsfq    %rsi, %rdx
;   cmovzq  %rdi, %rdx, %rdx
;   addq    %rdx, $64, %rdx
;   cmpq    $64, %rax
;   cmovzq  %rdx, %rax, %rax
;   xorq    %rdx, %rdx, %rdx
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x40, %ecx
;   bsfq %rdi, %rax
;   cmoveq %rcx, %rax
;   movl $0x40, %edi
;   bsfq %rsi, %rdx
;   cmoveq %rdi, %rdx
;   addq $0x40, %rdx
;   cmpq $0x40, %rax
;   cmoveq %rdx, %rax
;   xorq %rdx, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %ctz(i64) -> i64 {
block0(v0: i64):
    v1 = ctz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    $64, %ecx
;   bsfq    %rdi, %rax
;   cmovzq  %rcx, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x40, %ecx
;   bsfq %rdi, %rax
;   cmoveq %rcx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %ctz(i32) -> i32 {
block0(v0: i32):
    v1 = ctz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    $32, %ecx
;   bsfl    %edi, %eax
;   cmovzl  %ecx, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl $0x20, %ecx
;   bsfl %edi, %eax
;   cmovel %ecx, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %ctz(i16) -> i16 {
block0(v0: i16):
    v1 = ctz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwl  %di, %eax
;   movl    $16, %edx
;   bsfl    %eax, %eax
;   cmovzl  %edx, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwl %di, %eax
;   movl $0x10, %edx
;   bsfl %eax, %eax
;   cmovel %edx, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %ctz(i8) -> i8 {
block0(v0: i8):
    v1 = ctz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbl  %dil, %eax
;   movl    $8, %edx
;   bsfl    %eax, %eax
;   cmovzl  %edx, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbl %dil, %eax
;   movl $8, %edx
;   bsfl %eax, %eax
;   cmovel %edx, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
