test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64


function %clz(i128) -> i128 {
block0(v0: i128):
    v1 = clz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %r8
;   movabsq $-1, %rcx
;   bsrq    %rsi, %r9
;   cmovzq  %rcx, %r9, %r9
;   movl    $63, %edi
;   subq    %rdi, %r9, %rdi
;   movabsq $-1, %rdx
;   bsrq    %r8, %r10
;   cmovzq  %rdx, %r10, %r10
;   movl    $63, %eax
;   subq    %rax, %r10, %rax
;   addq    %rax, $64, %rax
;   cmpq    $64, %rdi
;   cmovnzq %rdi, %rax, %rax
;   xorq    %rdx, %rdx, %rdx
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %r8
;   movq $18446744073709551615, %rcx
;   bsrq %rsi, %r9
;   cmoveq %rcx, %r9
;   movl $0x3f, %edi
;   subq %r9, %rdi
;   movq $18446744073709551615, %rdx
;   bsrq %r8, %r10
;   cmoveq %rdx, %r10
;   movl $0x3f, %eax
;   subq %r10, %rax
;   addq $0x40, %rax
;   cmpq $0x40, %rdi
;   cmovneq %rdi, %rax
;   xorq %rdx, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %clz(i64) -> i64 {
block0(v0: i64):
    v1 = clz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movabsq $-1, %rax
;   bsrq    %rdi, %r8
;   cmovzq  %rax, %r8, %r8
;   movl    $63, %eax
;   subq    %rax, %r8, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq $18446744073709551615, %rax
;   bsrq %rdi, %r8
;   cmoveq %rax, %r8
;   movl $0x3f, %eax
;   subq %r8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %clz(i32) -> i32 {
block0(v0: i32):
    v1 = clz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movabsq $-1, %rax
;   bsrl    %edi, %r8d
;   cmovzl  %eax, %r8d, %r8d
;   movl    $31, %eax
;   subl    %eax, %r8d, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq $18446744073709551615, %rax
;   bsrl %edi, %r8d
;   cmovel %eax, %r8d
;   movl $0x1f, %eax
;   subl %r8d, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %clz(i16) -> i16 {
block0(v0: i16):
    v1 = clz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwl  %di, %eax
;   movabsq $-1, %rdx
;   bsrl    %eax, %r10d
;   cmovzl  %edx, %r10d, %r10d
;   movl    $15, %eax
;   subl    %eax, %r10d, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwl %di, %eax
;   movq $18446744073709551615, %rdx
;   bsrl %eax, %r10d
;   cmovel %edx, %r10d
;   movl $0xf, %eax
;   subl %r10d, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %clz(i8) -> i8 {
block0(v0: i8):
    v1 = clz v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbl  %dil, %eax
;   movabsq $-1, %rdx
;   bsrl    %eax, %r10d
;   cmovzl  %edx, %r10d, %r10d
;   movl    $7, %eax
;   subl    %eax, %r10d, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbl %dil, %eax
;   movq $18446744073709551615, %rdx
;   bsrl %eax, %r10d
;   cmovel %edx, %r10d
;   movl $7, %eax
;   subl %r10d, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

