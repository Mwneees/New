test compile precise-output
target x86_64 has_bmi2

function %sarx_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sshr v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   sarx    %edi, %esi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   sarxl %esi, %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sarx_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sshr v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   sarx    %rdi, %rsi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   sarxq %rsi, %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %shrx_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ushr v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   shrx    %edi, %esi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   shrxl %esi, %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %shrx_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ushr v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   shrx    %rdi, %rsi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   shrxq %rsi, %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %shlx_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ishl v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   shlx    %edi, %esi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   shlxl %esi, %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %shlx_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ishl v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   shlx    %rdi, %rsi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   shlxq %rsi, %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

