test compile precise-output
set unwind_info=false
target riscv64 has_v

function %umin_i8(i8, i8) -> i8{
block0(v0: i8, v1: i8):
    v2 = umin v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a0,255
;   andi a5,a1,255
;   umin a0,a3,a5##ty=i8
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a0, 0xff
;   andi a5, a1, 0xff
;   bgeu a3, a5, 0xc
;   mv a0, a3
;   j 8
;   mv a0, a5
;   ret

function %umin_i16(i16, i16) -> i16{
block0(v0: i16, v1: i16):
    v2 = umin v0, v1
    return v2
}

; VCode:
; block0:
;   slli a3,a0,48
;   srli a5,a3,48
;   slli a1,a1,48
;   srli a3,a1,48
;   umin a0,a5,a3##ty=i16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srli a5, a3, 0x30
;   slli a1, a1, 0x30
;   srli a3, a1, 0x30
;   bgeu a5, a3, 0xc
;   mv a0, a5
;   j 8
;   mv a0, a3
;   ret

function %umin_i32(i32, i32) -> i32{
block0(v0: i32, v1: i32):
    v2 = umin v0, v1
    return v2
}

; VCode:
; block0:
;   slli a3,a0,32
;   srli a5,a3,32
;   slli a1,a1,32
;   srli a3,a1,32
;   umin a0,a5,a3##ty=i32
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x20
;   srli a5, a3, 0x20
;   slli a1, a1, 0x20
;   srli a3, a1, 0x20
;   bgeu a5, a3, 0xc
;   mv a0, a5
;   j 8
;   mv a0, a3
;   ret

function %umin_i64(i64, i64) -> i64{
block0(v0: i64, v1: i64):
    v2 = umin v0, v1
    return v2
}

; VCode:
; block0:
;   mv a4,a0
;   umin a0,a4,a1##ty=i64
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a4, a0
;   bgeu a4, a1, 0xc
;   mv a0, a4
;   j 8
;   mv a0, a1
;   ret

function %umin_i128(i128, i128) -> i128{
block0(v0: i128, v1: i128):
    v2 = umin v0, v1
    return v2
}

; VCode:
; block0:
;   mv a4,a0
;   mv a5,a1
;   umin [a0,a1],[a4,a5],[a2,a3]##ty=i128
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a4, a0
;   mv a5, a1
;   bltu a5, a3, 0xc
;   bne a5, a3, 0x14
;   bgeu a4, a2, 0x10
;   mv a0, a4
;   mv a1, a5
;   j 0xc
;   mv a0, a2
;   mv a1, a3
;   ret

