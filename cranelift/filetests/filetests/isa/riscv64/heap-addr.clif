test compile precise-output
set unwind_info=false
target riscv64

function %dynamic_heap_check(i64 vmctx, i32) -> i64 {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    heap0 = dynamic gv0, bound gv1, offset_guard 0x1000, index_type i32

block0(v0: i64, v1: i32):
    v2 = heap_addr.i64 heap0, v1, 0
    return v2
}

; block0:
;   uext.w t3,a1
;   ld a2,0(a0)
;   addi t4,a2,0
;   ugt a5,t3,t4;;ty=i64
;   beq a5,zero,taken(label1),not_taken(label2)
; block1:
;   add t0,a0,t3
;   ori t1,zero,0
;   selectif_spectre_guard a0,t1,t0;;t3 ugt t4 ty=i64
;   ret
; block2:
;   udf;;trap_code=heap_oob

function %static_heap_check(i64 vmctx, i32) -> i64 {
    gv0 = vmctx
    heap0 = static gv0, bound 0x1_0000, offset_guard 0x1000, index_type i32

block0(v0: i64, v1: i32):
    v2 = heap_addr.i64 heap0, v1, 0
    return v2
}

; block0:
;   uext.w t3,a1
;   auipc t4,0
;   ld t4,12(t4)
;   j 12
;   .u64 0x10000
;   ugt a6,t3,t4;;ty=i64
;   beq a6,zero,taken(label1),not_taken(label2)
; block1:
;   add t2,a0,t3
;   ori t1,zero,0
;   auipc a0,0
;   ld a0,12(a0)
;   j 12
;   .u64 0x10000
;   selectif_spectre_guard a0,t1,t2;;t3 ugt a0 ty=i64
;   ret
; block2:
;   udf;;trap_code=heap_oob

