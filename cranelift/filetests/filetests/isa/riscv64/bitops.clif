test compile precise-output
set unwind_info=false
target riscv64

function %a(i8) -> i8 {
block0(v0: i8):
    v1 = bitrev v0
    return v1
}

; block0:
;   brev8 a0,a0
;   ret

function %a(i16) -> i16 {
block0(v0: i16):
    v1 = bitrev v0
    return v1
}

; block0:
;   rev8 a0,a0
;   brev8 a2,a0
;   srli a0,a2,48
;   ret

function %a(i32) -> i32 {
block0(v0: i32):
    v1 = bitrev v0
    return v1
}

; block0:
;   rev8 a0,a0
;   brev8 a2,a0
;   srli a0,a2,32
;   ret

function %a(i64) -> i64 {
block0(v0: i64):
    v1 = bitrev v0
    return v1
}

; block0:
;   rev8 a0,a0
;   brev8 a0,a0
;   ret

function %a(i128) -> i128 {
block0(v0: i128):
    v1 = bitrev v0
    return v1
}

; block0:
;   rev8 a3,a0
;   brev8 a5,a3
;   rev8 a7,a1
;   brev8 a0,a7
;   mv a1,a5
;   ret

function %b(i8) -> i8 {
block0(v0: i8):
    v1 = clz v0
    return v1
}

; block0:
;   uext.b a0,a0
;   clz a2,a0
;   addi a0,a2,-56
;   ret

function %b(i16) -> i16 {
block0(v0: i16):
    v1 = clz v0
    return v1
}

; block0:
;   uext.h a0,a0
;   clz a2,a0
;   addi a0,a2,-48
;   ret

function %b(i32) -> i32 {
block0(v0: i32):
    v1 = clz v0
    return v1
}

; block0:
;   clzw a0,a0
;   ret

function %b(i64) -> i64 {
block0(v0: i64):
    v1 = clz v0
    return v1
}

; block0:
;   clz a0,a0
;   ret

function %b(i128) -> i128 {
block0(v0: i128):
    v1 = clz v0
    return v1
}

; block0:
;   clz a3,a1
;   clz a5,a0
;   li a7,64
;   select_reg t4,a5,zero##condition=(a7 eq a3)
;   add a0,a3,t4
;   mv a1,zero
;   ret

function %c(i8) -> i8 {
block0(v0: i8):
    v1 = cls v0
    return v1
}

; block0:
;   bexti a1,a0,7
;   not a2,a0
;   select_reg a4,a0,a2##condition=(a1 eq zero)
;   uext.b a6,a4
;   clz t3,a6
;   addi t0,t3,-56
;   addi a0,t0,-1
;   ret

function %c(i16) -> i16 {
block0(v0: i16):
    v1 = cls v0
    return v1
}

; block0:
;   bexti a1,a0,15
;   not a2,a0
;   select_reg a4,a0,a2##condition=(a1 eq zero)
;   uext.h a6,a4
;   clz t3,a6
;   addi t0,t3,-48
;   addi a0,t0,-1
;   ret

function %c(i32) -> i32 {
block0(v0: i32):
    v1 = cls v0
    return v1
}

; block0:
;   bexti a1,a0,31
;   not a2,a0
;   select_reg a4,a0,a2##condition=(a1 eq zero)
;   clzw a6,a4
;   addi a0,a6,-1
;   ret

function %c(i64) -> i64 {
block0(v0: i64):
    v1 = cls v0
    return v1
}

; block0:
;   bexti a1,a0,63
;   not a2,a0
;   select_reg a4,a0,a2##condition=(a1 eq zero)
;   clz a6,a4
;   addi a0,a6,-1
;   ret

function %c(i128) -> i128 {
block0(v0: i128):
    v1 = cls v0
    return v1
}

; block0:
;   not a3,a0
;   select_reg a5,a3,a0##condition=(a1 slt zero)
;   not a7,a1
;   select_reg t4,a7,a1##condition=(a1 slt zero)
;   clz t1,t4
;   clz a0,a5
;   li a2,64
;   select_reg a4,a0,zero##condition=(a2 eq t1)
;   add a6,t1,a4
;   addi a0,a6,-1
;   mv a1,zero
;   ret

function %d(i8) -> i8 {
block0(v0: i8):
    v1 = ctz v0
    return v1
}

; block0:
;   bseti a0,a0,8
;   ctzw a0,a0
;   ret

function %d(i16) -> i16 {
block0(v0: i16):
    v1 = ctz v0
    return v1
}

; block0:
;   bseti a0,a0,16
;   ctzw a0,a0
;   ret

function %d(i32) -> i32 {
block0(v0: i32):
    v1 = ctz v0
    return v1
}

; block0:
;   ctzw a0,a0
;   ret

function %d(i64) -> i64 {
block0(v0: i64):
    v1 = ctz v0
    return v1
}

; block0:
;   ctz a0,a0
;   ret

function %d(i128) -> i128 {
block0(v0: i128):
    v1 = ctz v0
    return v1
}

; block0:
;   ctz a3,a0
;   ctz a5,a1
;   li a7,64
;   select_reg t4,a5,zero##condition=(a7 eq a3)
;   add a0,a3,t4
;   mv a1,zero
;   ret

function %d(i128) -> i128 {
block0(v0: i128):
    v1 = popcnt v0
    return v1
}

; block0:
;   cpop a3,a0
;   cpop a5,a1
;   add a0,a3,a5
;   mv a1,zero
;   ret

function %d(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; block0:
;   cpop a0,a0
;   ret

function %d(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; block0:
;   cpopw a0,a0
;   ret

function %d(i16) -> i16 {
block0(v0: i16):
    v1 = popcnt v0
    return v1
}

; block0:
;   uext.h a0,a0
;   cpopw a0,a0
;   ret

function %d(i8) -> i8 {
block0(v0: i8):
    v1 = popcnt v0
    return v1
}

; block0:
;   uext.b a0,a0
;   cpopw a0,a0
;   ret

function %bextend_b8() -> b32 {
block0:
    v1 = bconst.b8 true
    v2 = bextend.b32 v1
    return v2
}

; block0:
;   li a0,-1
;   ret

function %bextend_b1() -> b32 {
block0:
    v1 = bconst.b1 true
    v2 = bextend.b32 v1
    return v2
}

; block0:
;   li a0,-1
;   ret

function %bnot_i32(i32) -> i32 {
block0(v0: i32):
    v1 = bnot v0
    return v1
}

; block0:
;   not a0,a0
;   ret

function %bnot_i64(i64) -> i64 {
block0(v0: i64):
    v1 = bnot v0
    return v1
}

; block0:
;   not a0,a0
;   ret

function %bnot_i64_with_shift(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = ishl.i64 v0, v1
    v3 = bnot v2
    return v3
}

; block0:
;   slli a1,a0,3
;   not a0,a1
;   ret

function %bnot_i128(i128) -> i128 {
block0(v0: i128):
    v1 = bnot v0
    return v1
}

; block0:
;   not a0,a0
;   not a1,a1
;   ret

function %band_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = band v0, v1
    return v2
}

; block0:
;   and a0,a0,a1
;   ret

function %band_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = band v0, v1
    return v2
}

; block0:
;   and a0,a0,a1
;   ret

function %band_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = band v0, v1
    return v2
}

; block0:
;   and a0,a0,a2
;   and a1,a1,a3
;   ret

function %band_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = band v0, v1
    return v2
}

; block0:
;   andi a0,a0,3
;   ret

function %band_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = band v1, v0
    return v2
}

; block0:
;   andi a0,a0,3
;   ret

function %band_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = band v0, v3
    return v4
}

; block0:
;   slli a3,a1,3
;   and a0,a0,a3
;   ret

function %band_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = band v3, v0
    return v4
}

; block0:
;   slli a3,a1,3
;   and a0,a3,a0
;   ret

function %bor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bor v0, v1
    return v2
}

; block0:
;   or a0,a0,a1
;   ret

function %bor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bor v0, v1
    return v2
}

; block0:
;   or a0,a0,a1
;   ret

function %bor_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bor v0, v1
    return v2
}

; block0:
;   or a0,a0,a2
;   or a1,a1,a3
;   ret

function %bor_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bor v0, v1
    return v2
}

; block0:
;   ori a0,a0,3
;   ret

function %bor_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bor v1, v0
    return v2
}

; block0:
;   ori a0,a0,3
;   ret

function %bor_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bor v0, v3
    return v4
}

; block0:
;   slli a3,a1,3
;   or a0,a0,a3
;   ret

function %bor_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bor v3, v0
    return v4
}

; block0:
;   slli a3,a1,3
;   or a0,a3,a0
;   ret

function %bxor_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bxor v0, v1
    return v2
}

; block0:
;   xor a0,a0,a1
;   ret

function %bxor_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bxor v0, v1
    return v2
}

; block0:
;   xor a0,a0,a1
;   ret

function %bxor_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bxor v0, v1
    return v2
}

; block0:
;   xor a0,a0,a2
;   xor a1,a1,a3
;   ret

function %bxor_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bxor v0, v1
    return v2
}

; block0:
;   xori a0,a0,3
;   ret

function %bxor_i64_constant2(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 3
    v2 = bxor v1, v0
    return v2
}

; block0:
;   xori a0,a0,3
;   ret

function %bxor_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bxor v0, v3
    return v4
}

; block0:
;   slli a3,a1,3
;   xor a0,a0,a3
;   ret

function %bxor_i64_constant_shift2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = ishl.i64 v1, v2
    v4 = bxor v3, v0
    return v4
}

; block0:
;   slli a3,a1,3
;   xor a0,a3,a0
;   ret

function %band_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = band_not v0, v1
    return v2
}

; block0:
;   andn a0,a0,a1
;   ret

function %band_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = band_not v0, v1
    return v2
}

; block0:
;   andn a0,a0,a1
;   ret

function %band_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = band_not v0, v1
    return v2
}

; block0:
;   andn a0,a0,a2
;   andn a1,a1,a3
;   ret

function %band_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = band_not v0, v1
    return v2
}

; block0:
;   li a1,4
;   andn a0,a0,a1
;   ret

function %band_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = band_not v0, v3
    return v4
}

; block0:
;   slli a3,a1,4
;   andn a0,a0,a3
;   ret

function %bor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bor_not v0, v1
    return v2
}

; block0:
;   orn a0,a0,a1
;   ret

function %bor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bor_not v0, v1
    return v2
}

; block0:
;   orn a0,a0,a1
;   ret

function %bor_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bor_not v0, v1
    return v2
}

; block0:
;   orn a0,a0,a2
;   orn a1,a1,a3
;   ret

function %bor_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = bor_not v0, v1
    return v2
}

; block0:
;   li a1,4
;   orn a0,a0,a1
;   ret

function %bor_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = bor_not v0, v3
    return v4
}

; block0:
;   slli a3,a1,4
;   orn a0,a0,a3
;   ret

function %bxor_not_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = bxor_not v0, v1
    return v2
}

; block0:
;   xnor a0,a1,a0
;   ret

function %bxor_not_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = bxor_not v0, v1
    return v2
}

; block0:
;   xnor a0,a1,a0
;   ret

function %bxor_not_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = bxor_not v0, v1
    return v2
}

; block0:
;   xnor a0,a2,a0
;   xnor a1,a3,a1
;   ret

function %bxor_not_i64_constant(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 4
    v2 = bxor_not v0, v1
    return v2
}

; block0:
;   li a1,4
;   xnor a0,a1,a0
;   ret

function %bxor_not_i64_constant_shift(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 4
    v3 = ishl.i64 v1, v2
    v4 = bxor_not v0, v3
    return v4
}

; block0:
;   slli a3,a1,4
;   xnor a0,a3,a0
;   ret

function %ishl_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ishl.i128 v0, v1
    return v2
}

; block0:
;   andi a5,a2,127
;   li a7,128
;   sub a7,a7,a5
;   sll t0,a0,a5
;   srl t2,a0,a7
;   select_reg a2,zero,t2##condition=(a5 eq zero)
;   sll a3,a1,a5
;   or a6,a2,a3
;   li a7,64
;   select_reg a0,zero,t0##condition=(a5 uge a7)
;   select_reg a1,t0,a6##condition=(a5 uge a7)
;   ret

function %ishl_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = ishl.i128 v0, v1
    return v2
}

; block0:
;   andi a7,a2,127
;   li t4,128
;   sub t4,t4,a7
;   sll t2,a0,a7
;   srl a2,a0,t4
;   select_reg a3,zero,a2##condition=(a7 eq zero)
;   sll a5,a1,a7
;   or t3,a3,a5
;   li t4,64
;   select_reg a0,zero,t2##condition=(a7 uge t4)
;   select_reg a1,t2,t3##condition=(a7 uge t4)
;   ret

function %ushr_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ushr.i128 v0, v1
    return v2
}

; block0:
;   andi a5,a2,127
;   li a7,128
;   sub a7,a7,a5
;   sll t0,a1,a7
;   select_reg t2,zero,t0##condition=(a5 eq zero)
;   srl a2,a0,a5
;   or a3,t2,a2
;   li a6,64
;   srl a7,a1,a5
;   select_reg a0,a7,a3##condition=(a5 uge a6)
;   select_reg a1,zero,a7##condition=(a5 uge a6)
;   ret

function %ushr_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = ushr.i128 v0, v1
    return v2
}

; block0:
;   andi a7,a2,127
;   li t4,128
;   sub t4,t4,a7
;   sll t2,a1,t4
;   select_reg a2,zero,t2##condition=(a7 eq zero)
;   srl a3,a0,a7
;   or a5,a2,a3
;   li t3,64
;   srl t4,a1,a7
;   select_reg a0,t4,a5##condition=(a7 uge t3)
;   select_reg a1,zero,t4##condition=(a7 uge t3)
;   ret

function %sshr_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = sshr.i128 v0, v1
    return v2
}

; block0:
;   andi a5,a2,127
;   li a7,128
;   sub a7,a7,a5
;   sll t0,a1,a7
;   select_reg t2,zero,t0##condition=(a5 eq zero)
;   srl a2,a0,a5
;   or a3,t2,a2
;   li a6,64
;   sra a7,a1,a5
;   li t4,-1
;   select_reg t1,t4,zero##condition=(a1 slt zero)
;   select_reg a0,a7,a3##condition=(a5 uge a6)
;   select_reg a1,t1,a7##condition=(a5 uge a6)
;   ret

function %sshr_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = sshr.i128 v0, v1
    return v2
}

; block0:
;   andi a7,a2,127
;   li t4,128
;   sub t4,t4,a7
;   sll t2,a1,t4
;   select_reg a2,zero,t2##condition=(a7 eq zero)
;   srl a3,a0,a7
;   or a5,a2,a3
;   li t3,64
;   sra t4,a1,a7
;   li t1,-1
;   select_reg a1,t1,zero##condition=(a1 slt zero)
;   select_reg a0,t4,a5##condition=(a7 uge t3)
;   select_reg a1,a1,t4##condition=(a7 uge t3)
;   ret

