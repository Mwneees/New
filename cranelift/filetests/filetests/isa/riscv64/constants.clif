test compile precise-output
set unwind_info=false
target riscv64

function %f() -> b8 {
block0:
  v0 = bconst.b8 true
  return v0
}

; block0:
;   ori a0,zero,-1
;   ret

function %f() -> b16 {
block0:
  v0 = bconst.b16 false
  return v0
}

; block0:
;   ori a0,zero,0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0
  return v0
}

; block0:
;   ori a0,zero,0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff
  return v0
}

; block0:
;   lui a0,15
;   addi a0,a0,4095
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000
  return v0
}

; block0:
;   ori a0,zero,0
;   lui t6,1048560
;   addi t6,t6,0
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff00000000
  return v0
}

; block0:
;   lui a0,15
;   addi a0,a0,4095
;   ori t6,zero,0
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff000000000000
  return v0
}

; block0:
;   lui a0,1048560
;   addi a0,a0,0
;   ori t6,zero,0
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffffffff
  return v0
}

; block0:
;   ori a0,zero,-1
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffff0000
  return v0
}

; block0:
;   lui a0,1048560
;   addi a0,a0,0
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffff0000ffff
  return v0
}

; block0:
;   lui a0,1048575
;   addi a0,a0,4095
;   lui t6,15
;   addi t6,t6,4095
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000ffffffff
  return v0
}

; block0:
;   lui a0,1048560
;   addi a0,a0,0
;   lui t6,1048575
;   addi t6,t6,4095
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x0000ffffffffffff
  return v0
}

; block0:
;   lui a0,15
;   addi a0,a0,4095
;   lui t6,1048575
;   addi t6,t6,4095
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xf34bf0a31212003a ;; random digits
  return v0
}

; block0:
;   lui a0,996543
;   addi a0,a0,163
;   lui t6,74016
;   addi t6,t6,58
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e900001ef40000 ;; random digits with 2 clear half words
  return v0
}

; block0:
;   lui a0,77456
;   addi a0,a0,0
;   lui t6,126784
;   addi t6,t6,0
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e9ffff1ef4ffff ;; random digits with 2 full half words
  return v0
}

; block0:
;   lui a0,77471
;   addi a0,a0,4095
;   lui t6,126799
;   addi t6,t6,4095
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 -1
  return v0
}

; block0:
;   ori a0,zero,-1
;   ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 0xfffffff7
  return v0
}

; block0:
;   ori a0,zero,0
;   lui t6,1048575
;   addi t6,t6,4087
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffff7
  return v0
}

; block0:
;   ori a0,zero,0
;   lui t6,1048575
;   addi t6,t6,4087
;   slli a0,a0,32
;   srli t6,t6,32
;   or a0,a0,t6
;   ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffffffffffff7
  return v0
}

; block0:
;   ori a0,zero,-9
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x1.0
  return v0
}

; block0:
;   lui t2,261888
;   addi t2,t2,0
;   ori t6,zero,0
;   slli t2,t2,32
;   srli t6,t6,32
;   or t2,t2,t6
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x5.0
  return v0
}

; block0:
;   lui t6,264704
;   addi t6,t6,0
;   fmv.w.x fa0,t6
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x32.0
  return v0
}

; block0:
;   lui t2,263312
;   addi t2,t2,0
;   ori t6,zero,0
;   slli t2,t2,32
;   srli t6,t6,32
;   or t2,t2,t6
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x32.0
  return v0
}

; block0:
;   lui t6,271488
;   addi t6,t6,0
;   fmv.w.x fa0,t6
;   ret

function %f() -> f64 {
block0:
  v0 = f64const 0x0.0
  return v0
}

; block0:
;   ori t2,zero,0
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const 0x0.0
  return v0
}

; block0:
;   ori t6,zero,0
;   fmv.w.x fa0,t6
;   ret

function %f() -> f64 {
block0:
  v0 = f64const -0x10.0
  return v0
}

; block0:
;   lui t2,787200
;   addi t2,t2,0
;   ori t6,zero,0
;   slli t2,t2,32
;   srli t6,t6,32
;   or t2,t2,t6
;   fmv.d.x fa0,t2
;   ret

function %f() -> f32 {
block0:
  v0 = f32const -0x10.0
  return v0
}

; block0:
;   lui t6,792576
;   addi t6,t6,0
;   fmv.w.x fa0,t6
;   ret

