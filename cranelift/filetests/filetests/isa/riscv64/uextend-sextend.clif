test compile precise-output
set unwind_info=false
target riscv64

function %f_u_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = uextend.i64 v0
  return v1
}

; block0:
;   uextb a1,a0
;   mov a0,a1
;   ret

function %f_u_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = uextend.i32 v0
  return v1
}

; block0:
;   uextb a1,a0
;   mov a0,a1
;   ret

function %f_u_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = uextend.i16 v0
  return v1
}

; block0:
;   uextb a1,a0
;   mov a0,a1
;   ret

function %f_s_8_64(i8) -> i64 {
block0(v0: i8):
  v1 = sextend.i64 v0
  return v1
}

; block0:
;   sextb a1,a0
;   mov a0,a1
;   ret

function %f_s_8_32(i8) -> i32 {
block0(v0: i8):
  v1 = sextend.i32 v0
  return v1
}

; block0:
;   sextb a1,a0
;   mov a0,a1
;   ret

function %f_s_8_16(i8) -> i16 {
block0(v0: i8):
  v1 = sextend.i16 v0
  return v1
}

; block0:
;   sextb a1,a0
;   mov a0,a1
;   ret

function %f_u_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = uextend.i64 v0
  return v1
}

; block0:
;   uexth a1,a0
;   mov a0,a1
;   ret

function %f_u_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = uextend.i32 v0
  return v1
}

; block0:
;   uexth a1,a0
;   mov a0,a1
;   ret

function %f_s_16_64(i16) -> i64 {
block0(v0: i16):
  v1 = sextend.i64 v0
  return v1
}

; block0:
;   sexth a1,a0
;   mov a0,a1
;   ret

function %f_s_16_32(i16) -> i32 {
block0(v0: i16):
  v1 = sextend.i32 v0
  return v1
}

; block0:
;   sexth a1,a0
;   mov a0,a1
;   ret

function %f_u_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = uextend.i64 v0
  return v1
}

; block0:
;   uextw a1,a0
;   mov a0,a1
;   ret

function %f_s_32_64(i32) -> i64 {
block0(v0: i32):
  v1 = sextend.i64 v0
  return v1
}

; block0:
;   sextw a1,a0
;   mov a0,a1
;   ret

