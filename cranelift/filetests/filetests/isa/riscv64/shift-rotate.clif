test compile precise-output
set unwind_info=false
target riscv64

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ROR, variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %i128_rotr(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotr.i128 v0, v1
  return v2
}

; block0:
;   andi a7,a2,127
;   li t4,128
;   sub t4,t4,a7
;   srl t2,a0,a7
;   sll a2,a1,t4
;   select_reg a3,zero,a2##condition=(a7 eq zero)
;   or a5,t2,a3
;   srl t3,a1,a7
;   sll t4,a0,t4
;   select_reg t1,zero,t4##condition=(a7 eq zero)
;   or a1,t3,t1
;   li a2,64
;   select_reg a0,a1,a5##condition=(a7 uge a2)
;   select_reg a1,a5,a1##condition=(a7 uge a2)
;   ret

function %f0(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotr.i64 v0, v1
  return v2
}

; block0:
;   ror a0,a0,a1
;   ret

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotr.i32 v0, v1
  return v2
}

; block0:
;   rorw a0,a0,a1
;   ret

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotr.i16 v0, v1
  return v2
}

; block0:
;   andi a2,a1,15
;   li a4,16
;   sub a4,a4,a2
;   srl a7,a0,a2
;   sll t4,a0,a4
;   or a0,a7,t4
;   ret

function %f3(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotr.i8 v0, v1
  return v2
}

; block0:
;   andi a2,a1,7
;   li a4,8
;   sub a4,a4,a2
;   srl a7,a0,a2
;   sll t4,a0,a4
;   or a0,a7,t4
;   ret

function %i128_rotl(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = rotl.i128 v0, v1
  return v2
}

; block0:
;   andi a7,a2,127
;   li t4,128
;   sub t4,t4,a7
;   sll t2,a0,a7
;   srl a2,a1,t4
;   select_reg a3,zero,a2##condition=(a7 eq zero)
;   or a5,t2,a3
;   sll t3,a1,a7
;   srl t4,a0,t4
;   select_reg t1,zero,t4##condition=(a7 eq zero)
;   or a1,t3,t1
;   li a2,64
;   select_reg a0,a1,a5##condition=(a7 uge a2)
;   select_reg a1,a5,a1##condition=(a7 uge a2)
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = rotl.i64 v0, v1
  return v2
}

; block0:
;   rol a0,a0,a1
;   ret

function %f5(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = rotl.i32 v0, v1
  return v2
}

; block0:
;   rolw a0,a0,a1
;   ret

function %f6(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = rotl.i16 v0, v1
  return v2
}

; block0:
;   andi a2,a1,15
;   li a4,16
;   sub a4,a4,a2
;   sll a7,a0,a2
;   srl t4,a0,a4
;   or a0,a7,t4
;   ret

function %f7(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = rotl.i8 v0, v1
  return v2
}

; block0:
;   andi a2,a1,7
;   li a4,8
;   sub a4,a4,a2
;   sll a7,a0,a2
;   srl t4,a0,a4
;   or a0,a7,t4
;   ret

function %f8(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ushr.i64 v0, v1
  return v2
}

; block0:
;   srl a0,a0,a1
;   ret

function %f9(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ushr.i32 v0, v1
  return v2
}

; block0:
;   srlw a0,a0,a1
;   ret

function %f10(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ushr.i16 v0, v1
  return v2
}

; block0:
;   uext.h a2,a0
;   andi a4,a1,15
;   srlw a0,a2,a4
;   ret

function %f11(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ushr.i8 v0, v1
  return v2
}

; block0:
;   uext.b a2,a0
;   andi a4,a1,7
;   srlw a0,a2,a4
;   ret

function %f12(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ishl.i64 v0, v1
  return v2
}

; block0:
;   sll a0,a0,a1
;   ret

function %f13(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = ishl.i32 v0, v1
  return v2
}

; block0:
;   sllw a0,a0,a1
;   ret

function %f14(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = ishl.i16 v0, v1
  return v2
}

; block0:
;   andi a2,a1,15
;   sllw a0,a0,a2
;   ret

function %f15(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = ishl.i8 v0, v1
  return v2
}

; block0:
;   andi a2,a1,7
;   sllw a0,a0,a2
;   ret

function %f16(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sshr.i64 v0, v1
  return v2
}

; block0:
;   sra a0,a0,a1
;   ret

function %f17(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sshr.i32 v0, v1
  return v2
}

; block0:
;   sraw a0,a0,a1
;   ret

function %f18(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sshr.i16 v0, v1
  return v2
}

; block0:
;   sext.h a2,a0
;   andi a4,a1,15
;   sra a0,a2,a4
;   ret

function %f19(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sshr.i8 v0, v1
  return v2
}

; block0:
;   sext.b a2,a0
;   andi a4,a1,7
;   sra a0,a2,a4
;   ret

function %f20(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotr.i64 v0, v1
  return v2
}

; block0:
;   li a1,17
;   ror a0,a0,a1
;   ret

function %f21(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = rotl.i64 v0, v1
  return v2
}

; block0:
;   li a1,17
;   rol a0,a0,a1
;   ret

function %f22(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 17
  v2 = rotl.i32 v0, v1
  return v2
}

; block0:
;   li a1,17
;   rolw a0,a0,a1
;   ret

function %f23(i16) -> i16 {
block0(v0: i16):
  v1 = iconst.i32 10
  v2 = rotl.i16 v0, v1
  return v2
}

; block0:
;   li a1,10
;   andi a2,a1,15
;   li a4,16
;   sub a4,a4,a2
;   sll a7,a0,a2
;   srl t4,a0,a4
;   or a0,a7,t4
;   ret

function %f24(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i32 3
  v2 = rotl.i8 v0, v1
  return v2
}

; block0:
;   li a1,3
;   andi a2,a1,7
;   li a4,8
;   sub a4,a4,a2
;   sll a7,a0,a2
;   srl t4,a0,a4
;   or a0,a7,t4
;   ret

function %f25(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ushr.i64 v0, v1
  return v2
}

; block0:
;   srli a0,a0,17
;   ret

function %f26(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = sshr.i64 v0, v1
  return v2
}

; block0:
;   srai a0,a0,17
;   ret

function %f27(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i32 17
  v2 = ishl.i64 v0, v1
  return v2
}

; block0:
;   slli a0,a0,17
;   ret

