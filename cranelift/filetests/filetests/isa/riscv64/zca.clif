test compile precise-output
set unwind_info=false
target riscv64 has_zca

function %c_add(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iadd.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   add a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.add a0, a1
;   ret


function %c_mv(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  return v1
}

; VCode:
; block0:
;   mv a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.mv a0, a1
;   ret


function %c_mv_ori(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor_imm.i64 v1, 0
  return v2
}

; VCode:
; block0:
;   ori a0,a1,0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.mv a0, a1
;   ret

function %c_and(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   and a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.and a0, a1
;   ret


function %c_or(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   or a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.or a0, a1
;   ret

function %c_xor(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   xor a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.xor a0, a1
;   ret

function %c_sub(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = isub.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   sub a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.sub a0, a1
;   ret

function %c_add_w(i32, i32) -> i64 {
block0(v0: i32, v1: i32):
    v2 = iadd.i32 v0, v1
    v3 = sextend.i64 v2
    return v3
}

; VCode:
; block0:
;   addw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addw a0, a1
;   ret

function %c_sub_w(i32, i32) -> i64 {
block0(v0: i32, v1: i32):
    v2 = isub.i32 v0, v1
    v3 = sextend.i64 v2
    return v3
}

; VCode:
; block0:
;   subw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.subw a0, a1
;   ret

;; The select emits a `c.j` instruction.
function %c_j(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = select.i8 v0, v1, v2
  return v3
}

; VCode:
; block0:
;   andi a4,a0,255
;   select_i8 a0,a1,a2##condition=a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a4, a0, 0xff
;   beqz a4, 8
;   c.mv a0, a1
;   c.j 4
;   c.mv a0, a2
;   ret

