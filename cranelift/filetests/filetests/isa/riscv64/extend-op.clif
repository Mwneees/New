test compile precise-output
set unwind_info=false
target riscv64

function %f(i8) -> i64 {
block0(v0: i8):
  v1 = sextend.i64 v0
  v2 = iconst.i64 42
  v3 = iadd.i64 v2, v1
  return v3
}

; block0:
;   sext_8_to_64 a1,a0
;   addi a0,a1,42
;   ret

function %f2(i8, i64) -> i64 {
block0(v0: i8, v1: i64):
  v2 = sextend.i64 v0
  v3 = iadd.i64 v2, v1
  return v3
}

; block0:
;   sext_8_to_64 a3,a0
;   add a0,a3,a1
;   ret

function %i128_uextend_i64(i64) -> i128 {
block0(v0: i64):
    v1 = uextend.i128 v0
    return v1
}

; block0:
;   uext_64_to_128 a1,a0
;   mov a3,a1
;   ori a1,zero,0
;   mov a0,a3
;   ret

function %i128_sextend_i64(i64) -> i128 {
block0(v0: i64):
    v1 = sextend.i128 v0
    return v1
}

; block0:
;   mov a4,a0
;   bexti a3,a0,63
;   sext_1_to_64 a1,a3
;   ret

function %i128_uextend_i32(i32) -> i128 {
block0(v0: i32):
    v1 = uextend.i128 v0
    return v1
}

; block0:
;   uext_32_to_128 a1,a0
;   mov a3,a1
;   ori a1,zero,0
;   mov a0,a3
;   ret

function %i128_sextend_i32(i32) -> i128 {
block0(v0: i32):
    v1 = sextend.i128 v0
    return v1
}

; block0:
;   sext_32_to_64 a1,a0
;   mov a4,a1
;   bexti a3,a0,31
;   sext_1_to_64 a1,a3
;   mov a0,a4
;   ret

function %i128_uextend_i16(i16) -> i128 {
block0(v0: i16):
    v1 = uextend.i128 v0
    return v1
}

; block0:
;   uext_16_to_128 a1,a0
;   mov a3,a1
;   ori a1,zero,0
;   mov a0,a3
;   ret

function %i128_sextend_i16(i16) -> i128 {
block0(v0: i16):
    v1 = sextend.i128 v0
    return v1
}

; block0:
;   sext_16_to_64 a1,a0
;   mov a4,a1
;   bexti a3,a0,15
;   sext_1_to_64 a1,a3
;   mov a0,a4
;   ret

function %i128_uextend_i8(i8) -> i128 {
block0(v0: i8):
    v1 = uextend.i128 v0
    return v1
}

; block0:
;   uext_8_to_128 a1,a0
;   mov a3,a1
;   ori a1,zero,0
;   mov a0,a3
;   ret

function %i128_sextend_i8(i8) -> i128 {
block0(v0: i8):
    v1 = sextend.i128 v0
    return v1
}

; block0:
;   sext_8_to_64 a1,a0
;   mov a4,a1
;   bexti a3,a0,7
;   sext_1_to_64 a1,a3
;   mov a0,a4
;   ret

function %i8x16_uextend_i16(i8x16) -> i16 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = uextend.i16 v1
    return v2
}

; block0:
;   umov w0, v0.b[1]
;   ret

function %i8x16_uextend_i32(i8x16) -> i32 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = uextend.i32 v1
    return v2
}

; block0:
;   umov w0, v0.b[1]
;   ret

function %i8x16_uextend_i64(i8x16) -> i64 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = uextend.i64 v1
    return v2
}

; block0:
;   umov w0, v0.b[1]
;   ret

function %i8x16_uextend_i128(i8x16) -> i128 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = uextend.i128 v1
    return v2
}

; block0:
;   umov w0, v0.b[1]
;   movz x1, #0
;   ret

function %i8x16_sextend_i16(i8x16) -> i16 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = sextend.i16 v1
    return v2
}

; block0:
;   smov w0, v0.b[1]
;   ret

function %i8x16_sextend_i32(i8x16) -> i32 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = sextend.i32 v1
    return v2
}

; block0:
;   smov w0, v0.b[1]
;   ret

function %i8x16_sextend_i64(i8x16) -> i64 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = sextend.i64 v1
    return v2
}

; block0:
;   smov x0, v0.b[1]
;   ret

function %i8x16_sextend_i128(i8x16) -> i128 {
block0(v0: i8x16):
    v1 = extractlane v0, 1
    v2 = sextend.i128 v1
    return v2
}

; block0:
;   smov x0, v0.b[1]
;   asr x1, x0, #63
;   ret

function %i16x8_uextend_i32(i16x8) -> i32 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = uextend.i32 v1
    return v2
}

; block0:
;   umov w0, v0.h[1]
;   ret

function %i16x8_uextend_i64(i16x8) -> i64 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = uextend.i64 v1
    return v2
}

; block0:
;   umov w0, v0.h[1]
;   ret

function %i16x8_uextend_i128(i16x8) -> i128 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = uextend.i128 v1
    return v2
}

; block0:
;   umov w0, v0.h[1]
;   movz x1, #0
;   ret

function %i16x8_sextend_i32(i16x8) -> i32 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = sextend.i32 v1
    return v2
}

; block0:
;   smov w0, v0.h[1]
;   ret

function %i16x8_sextend_i64(i16x8) -> i64 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = sextend.i64 v1
    return v2
}

; block0:
;   smov x0, v0.h[1]
;   ret

function %i16x8_sextend_i128(i16x8) -> i128 {
block0(v0: i16x8):
    v1 = extractlane v0, 1
    v2 = sextend.i128 v1
    return v2
}

; block0:
;   smov x0, v0.h[1]
;   asr x1, x0, #63
;   ret

function %i32x4_uextend_i64(i32x4) -> i64 {
block0(v0: i32x4):
    v1 = extractlane v0, 1
    v2 = uextend.i64 v1
    return v2
}

; block0:
;   mov w0, v0.s[1]
;   ret

function %i32x4_uextend_i128(i32x4) -> i128 {
block0(v0: i32x4):
    v1 = extractlane v0, 1
    v2 = uextend.i128 v1
    return v2
}

; block0:
;   mov w0, v0.s[1]
;   movz x1, #0
;   ret

function %i32x4_sextend_i64(i32x4) -> i64 {
block0(v0: i32x4):
    v1 = extractlane v0, 1
    v2 = sextend.i64 v1
    return v2
}

; block0:
;   smov x0, v0.s[1]
;   ret

function %i32x4_sextend_i128(i32x4) -> i128 {
block0(v0: i32x4):
    v1 = extractlane v0, 1
    v2 = sextend.i128 v1
    return v2
}

; block0:
;   smov x0, v0.s[1]
;   asr x1, x0, #63
;   ret

function %i64x2_uextend_i128(i64x2) -> i128 {
block0(v0: i64x2):
    v1 = extractlane v0, 1
    v2 = uextend.i128 v1
    return v2
}

; block0:
;   mov x0, v0.d[1]
;   movz x1, #0
;   ret

function %i64x2_sextend_i128(i64x2) -> i128 {
block0(v0: i64x2):
    v1 = extractlane v0, 1
    v2 = sextend.i128 v1
    return v2
}

; block0:
;   mov x0, v0.d[1]
;   asr x1, x0, #63
;   ret

