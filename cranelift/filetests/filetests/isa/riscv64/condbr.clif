test compile precise-output
set unwind_info=false
target riscv64

function %f(i64, i64) -> b1 {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  return v2
}

; block0:
;   eq a0,a0,a1##ty=i64
;   ret

function %icmp_eq_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp eq v0, v1
  return v2
}

; block0:
;   eq a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_ne_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ne v0, v1
  return v2
}

; block0:
;   ne a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_slt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp slt v0, v1
  return v2
}

; block0:
;   slt a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_ult_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ult v0, v1
  return v2
}

; block0:
;   ult a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_sle_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sle v0, v1
  return v2
}

; block0:
;   sle a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_ule_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ule v0, v1
  return v2
}

; block0:
;   ule a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_sgt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sgt v0, v1
  return v2
}

; block0:
;   sgt a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_ugt_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp ugt v0, v1
  return v2
}

; block0:
;   ugt a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_sge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp sge v0, v1
  return v2
}

; block0:
;   sge a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_uge_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp uge v0, v1
  return v2
}

; block0:
;   uge a0,[a0,a1],[a2,a3]##ty=i128
;   ret

function %icmp_of_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp of v0, v1
  return v2
}

; block0:
;   srli a6,a1,63
;   srli t3,a3,63
;   sub t0,a0,a2
;   sltu t2,a0,t0
;   sub a1,a1,a3
;   sub a3,a1,t2
;   srli a5,a3,63
;   not a7,t3
;   not t4,a5
;   and t1,a7,t4
;   and a0,a6,t1
;   not a2,a6
;   and a4,t3,a5
;   and a6,a2,a4
;   or t3,a0,a6
;   sext.b1 a0,t3
;   ret

function %icmp_nof_i128(i128, i128) -> b1 {
block0(v0: i128, v1: i128):
  v2 = icmp nof v0, v1
  return v2
}

; block0:
;   srli a6,a1,63
;   srli t3,a3,63
;   sub t0,a0,a2
;   sltu t2,a0,t0
;   sub a1,a1,a3
;   sub a3,a1,t2
;   srli a5,a3,63
;   not a7,t3
;   not t4,a5
;   and t1,a7,t4
;   and a0,a6,t1
;   not a2,a6
;   and a4,t3,a5
;   and a6,a2,a4
;   or t3,a0,a6
;   sext.b1 t0,t3
;   not a0,t0
;   ret

function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block2

block1:
  v4 = iconst.i64 1
  return v4

block2:
  v5 = iconst.i64 2
  return v5
}

; block0:
;   eq a4,a0,a1##ty=i64
;   bne a4,zero,taken(label1),not_taken(label2)
; block1:
;   li a0,1
;   ret
; block2:
;   li a0,2
;   ret

function %f(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = ifcmp v0, v1
  brif eq v2, block1
  jump block1

block1:
  v4 = iconst.i64 1
  return v4
}

; block0:
;   eq a3,a0,a1##ty=i64
;   bne a3,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   li a0,1
;   ret

function %i128_brz(i128){
block0(v0: i128):
    brz v0, block1
    jump block1

block1:
    nop
    return
}

; block0:
;   bne a1,zero,taken(label2),not_taken(0)
;   beq a0,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_brnz(i128){
block0(v0: i128):
    brnz v0, block1
    jump block1

block1:
    nop
    return
}

; block0:
;   bne a1,zero,taken(label1),not_taken(0)
;   bne a0,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_eq(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp eq v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   eq a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_ne(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ne v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   ne a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_slt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp slt v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   slt a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_ult(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ult v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   ult a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_sle(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sle v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   sle a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_ule(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ule v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   ule a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_sgt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sgt v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   sgt a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_ugt(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp ugt v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   ugt a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_sge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp sge v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   sge a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_uge(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp uge v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   uge a5,[a0,a1],[a2,a3]##ty=i128
;   bne a5,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_of(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp of v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   srli a5,a1,63
;   srli a7,a3,63
;   sub t4,a0,a2
;   sltu t1,a0,t4
;   sub a0,a1,a3
;   sub a2,a0,t1
;   srli a4,a2,63
;   not a6,a7
;   not t3,a4
;   and t0,a6,t3
;   and t2,a5,t0
;   not a1,a5
;   and a3,a7,a4
;   and a5,a1,a3
;   or a7,t2,a5
;   sext.b1 t4,a7
;   bne t4,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

function %i128_bricmp_nof(i128, i128) {
block0(v0: i128, v1: i128):
  br_icmp nof v0, v1, block1
  jump block1

block1:
  return
}

; block0:
;   srli a5,a1,63
;   srli a7,a3,63
;   sub t4,a0,a2
;   sltu t1,a0,t4
;   sub a0,a1,a3
;   sub a2,a0,t1
;   srli a4,a2,63
;   not a6,a7
;   not t3,a4
;   and t0,a6,t3
;   and t2,a5,t0
;   not a1,a5
;   and a3,a7,a4
;   and a5,a1,a3
;   or a7,t2,a5
;   sext.b1 t4,a7
;   not t1,t4
;   bne t1,zero,taken(label1),not_taken(label2)
; block1:
;   j label3
; block2:
;   j label3
; block3:
;   ret

